package com.bjit.tss.service.impl;

import com.bjit.tss.entity.ExamineeInfo;
import com.bjit.tss.entity.LoginInfo;
import com.bjit.tss.exception.AdmitGenerationException;
import com.bjit.tss.exception.UserException;
import com.bjit.tss.repository.ExamineeRepository;
import com.bjit.tss.enums.Role;
import com.bjit.tss.service.AdmitCardService;
import com.lowagie.text.*;
import com.lowagie.text.Font;
import com.lowagie.text.pdf.PdfWriter;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.awt.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Objects;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class AdmitCardServiceImpl implements AdmitCardService {

    private final ExamineeRepository examineeRepository;

    @Override
    @Transactional
    public ByteArrayInputStream generateAdmit(String examineeId) {
        Long examineId = Long.valueOf(examineeId);
        Optional<ExamineeInfo> examineeInfo = examineeRepository.findById(examineId);
        if (examineeInfo.isEmpty()) {
            throw new UserException("User not found");
        }

        LoginInfo loginInfo = (LoginInfo) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        if (!Objects.equals(loginInfo.getUserInfo().getUserId(), examineeInfo.get().getUserInfo().getUserId())) {
            throw new UserException("You are not authorized for this operation.");
        }

        if (examineeInfo.get().getRole() != Role.CANDIDATE) {
            throw new UserException("Your role is not authorized for this operation.");
        }

        String title = "Admit Card \nWritten Exam ";
        String name = "Applicant Name : " + examineeInfo.get().getUserInfo().getFirstName() +
                " " + examineeInfo.get().getUserInfo().getLastName();
        String id = "Applicant ID : " + examineeInfo.get().getExamineeId();
        String courseName = "Course Name : "+ examineeInfo.get().getCourseInfo().getCourseName();
        String examTime = "Written Exam Time : " + examineeInfo.get().getCourseInfo().getWrittenExamTime();
        String InstructionTitle = "Instruction";
        String Instruction = examineeInfo.get().getCourseInfo().getWrittenExamInstruction();

        try {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            Document document = new Document();

            PdfWriter.getInstance(document, out);
            document.open();

            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 25, Color.black);
            Paragraph titlePara = new Paragraph(title, titleFont);
            titlePara.setAlignment(Element.ALIGN_CENTER);
            document.add(titlePara);

            Font bodyFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14, Color.black);
            Paragraph namePara = new Paragraph(name, bodyFont);
            namePara.setAlignment(Element.ALIGN_LEFT);
            document.add(namePara);

            Paragraph idPara = new Paragraph(id, bodyFont);
            idPara.setAlignment(Element.ALIGN_LEFT);
            document.add(idPara);

            Paragraph courseNamePara = new Paragraph(courseName, bodyFont);
            courseNamePara.setAlignment(Element.ALIGN_LEFT);
            document.add(courseNamePara);

            Paragraph examTimePara = new Paragraph(examTime, bodyFont);
            examTimePara.setAlignment(Element.ALIGN_LEFT);
            document.add(examTimePara);

            Font titleFont2 = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18, Color.black);
            Paragraph InstructionTitlePara = new Paragraph(InstructionTitle, titleFont2);
            InstructionTitlePara.setAlignment(Element.ALIGN_CENTER);
            document.add(InstructionTitlePara);

            Paragraph InstructionPara = new Paragraph(Instruction, bodyFont);
            InstructionPara.setAlignment(Element.ALIGN_LEFT);
            document.add(InstructionPara);

            document.close();

            System.out.println("Admit card generated by : "+examineeInfo.get().getUserInfo().getFirstName()+ " whose email is : "+examineeInfo.get().getUserInfo().getEmail());
            return new ByteArrayInputStream(out.toByteArray());
        } catch (Exception ex) {
            throw new AdmitGenerationException(ex.getMessage());
        }
    }
}